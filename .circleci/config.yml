version: 2
jobs:
  deploy-to-dockerhub:
    docker:
      - image: fitnesskeeper/docker-ci-builder
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and push Docker image
          command: |
            # check if this image exists already on dockerhub
            echo "checking recent commits"
            get-latest-nonmerge-commit.sh --debug
            commit=$(get-latest-nonmerge-commit.sh)
            if [[ "$commit" ]]; then
              echo "most recent non-merge commit: $commit"
              echo "checking dockerhub for it"
              export DOCKER_REPO=asicsdigital/strongdm
              export DOCKER_TAG=$commit
              found=$(check-dockerhub.sh)
              if [[ "$found" ]]; then
                echo "found image already on dockerhub"
                should_build=no
              else
                echo "didn't find this image tag on dockerhub"
                should_build=yes
              fi
            else
              echo "no non-merge commit found, exiting"
              exit 1
            fi
            # setup proper tags and BUILD_ENV
            if [[ "$CIRCLE_BRANCH" = "master"  ]]; then
              DOCKER_TAG=latest
              DOCKER_BUILD_TAG="build-${CIRCLE_BUILD_NUM}"
              should_push_commit=yes
            fi
            # display tags
            echo "tag is: " $DOCKER_TAG
            docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            if [[ "$should_build" = "yes" ]] ; then
              echo "building container"
              if [[ "$should_push_commit" = "yes" ]] ; then
                export GIT_COMMIT_SHA=$commit
              fi
              time docker build \
                --build-arg=GIT_COMMIT_SHA=$GIT_COMMIT_SHA \
                -t asicsdigital/strongdm:$DOCKER_TAG .
              # run tests
              export DOCKER_TAG
              # if we made it here then tests passed, so now push.
              if [[ "$should_push_commit" = "yes" ]] ; then
                # tag and push this commit hash
                echo "pushing this commit tag $commit"
                docker tag asicsdigital/strongdm:$DOCKER_TAG asicsdigital/strongdm:$commit
                time docker push asicsdigital/strongdm:$commit
              fi
            else
              echo "pulling and re-tagging container"
              time docker pull asicsdigital/strongdm:$commit
              docker tag asicsdigital/strongdm:$commit asicsdigital/strongdm:$DOCKER_TAG
            fi
            time docker push asicsdigital/strongdm:$DOCKER_TAG
            # check if we should push to additional tag
            if [[ "$DOCKER_BUILD_TAG" ]]; then
              echo "also pushing to tag: " $DOCKER_BUILD_TAG
              docker tag asicsdigital/strongdm:$DOCKER_TAG asicsdigital/strongdm:$DOCKER_BUILD_TAG
              docker push asicsdigital/strongdm:$DOCKER_BUILD_TAG
            fi

  build:
    docker:
      - image: hashicorp/terraform:0.12.29
        entrypoint: /bin/sh
    steps:
      - checkout
      - run:
          name: init tf (terraform init)
          command: terraform init -input=false
      - run:
          name: validate tf files (terraform validate)
          command: find . -type f -name "*.tf" -exec dirname {} \;|sort -u | while read m; do (terraform validate "$m" && echo "âˆš $m") || exit 1 ; done
      - run:
          name: check if all tf files are formatted (terraform fmt)
          command: if [ `terraform fmt | wc -c` -ne 0 ]; then echo "Some terraform files need be formatted, run 'terraform fmt' to fix"; exit 1; fi
      - run:
          name: "get tflint"
          command: apk update && apk add wget ; wget https://github.com/wata727/tflint/releases/download/v0.23.1/tflint_linux_amd64.zip ; unzip tflint_linux_amd64.zip
      - run:
          name: "install tflint"
          command: mkdir -p /usr/local/tflint/bin ; export PATH=/usr/local/tflint/bin:$PATH ; install tflint /usr/local/tflint/bin
      - run:
          name: "tflint check"
          command: /usr/local/tflint/bin/tflint
workflows:
  version: 2
  build:
    jobs:
      - deploy-to-dockerhub:
          filters:
            branches:
              only:
                - master
      - build
